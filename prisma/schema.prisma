// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProducts")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[] @relation()
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products    Product[] @relation("CategoryToProducts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[] @relation("SizeToProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[] @relation("ColorToProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id            String   @id @default(uuid())
  name          String
  isFeatured    Boolean
  isArchived    Boolean
  price         Decimal
  categoryId    String
  category      Category @relation("CategoryToProducts", fields: [categoryId], references: [id])
  sizeId        String
  size          Size     @relation("SizeToProducts", fields: [sizeId], references: [id])
  colorId       String
  color         Color    @relation("ColorToProducts", fields: [colorId], references: [id])
  storeId       String
  store         Store    @relation("StoreToProducts", fields: [storeId], references: [id])
  productImages Image[]  @relation()
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
